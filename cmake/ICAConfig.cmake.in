@PACKAGE_INIT@

# ICA is available only for Clang
if(NOT CMAKE_CXX_COMPILER_ID STREQUAL "Clang" AND 
   NOT CMAKE_CXX_COMPILER_ID STREQUAL "AppleClang"
   )
    message(FATAL_ERROR "ICA is a Clang plugin, it cannot be used with another compiler")
endif()

if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS @LLVM_PACKAGE_VERSION@)
    message(FATAL_ERROR "Your compiler is too old - this version of ICA was built for Clang @LLVM_PACKAGE_VERSION@.")
endif()

include("${CMAKE_CURRENT_LIST_DIR}/ICATargets.cmake")
check_required_components(ICA)

function(add_ica_options)
    foreach(opt IN LISTS ARGN)
        add_compile_options("SHELL:-Xclang -plugin-arg-ica-plugin -Xclang ${opt}")
    endforeach()
endfunction()

function(target_ica_options TARGET VISIBILITY)
    foreach(opt IN LISTS ARGN)
        target_compile_options(${TARGET} ${VISIBILITY} "SHELL:-Xclang -plugin-arg-ica-plugin -Xclang ${opt}")
    endforeach()
endfunction()

function(add_ica_checks)
    list(JOIN ARGN "," ICA_CHECKS)
    link_libraries(ICA::ICAChecks)
    add_ica_options("checks=${ICA_CHECKS}")
endfunction()

function(target_ica_checks TARGET VISIBILITY)
    list(JOIN ARGN "," ICA_CHECKS)
    target_link_libraries(${TARGET} ${VISIBILITY} ICA::ICAChecks)
    target_ica_options(${TARGET} ${VISIBILITY} "checks=${ICA_CHECKS}")
endfunction()

function(ica_no_url)
    add_ica_options("no-url")
endfunction()

function(target_ica_no_url TARGET VISIBILITY)
    target_ica_options(${TARGET} ${VISIBILITY} "no-url")
endfunction()
